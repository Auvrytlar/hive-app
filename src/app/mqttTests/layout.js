"use client";
import { useSelectedLayoutSegment } from "next/navigation";
import Link from "next/link";

// import { Inter } from "next/font/google";
import { MqttProvider } from "@lib/context/MqttContext";

// const inter = Inter({ subsets: ["latin"] }); // Font

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const activeSegment = useSelectedLayoutSegment();
  // const links = [{ label: "Dev", path: "/mqttTests/dev", targetSegment: "dev" }];

  return (
    <>
      <MqttProvider>
        <ul>
          <li>
            <strong>Client-Side</strong>
            <p className="m-0">
              Client-Side would create a MQTTClient on each client. As each client would have a connection to the broker,
              authentication and authorisation may become problems.
            </p>
          </li>
          <li>
            <strong>Server-Side</strong>
            <p className="m-0">
              Server-Side is possible, however this approach would be limited to the backend. The frontend would have to rely on API
              calls or Websockets.
            </p>
          </li>
          <li>
            <p className="m-0">Either way should have a direct connection to the receivers.</p>
          </li>
        </ul>
        <nav>
          <ul>
            {/* {links.map((l, i) => {
              return (
                <li key={i}>
                  <Link href={l.path} className={activeSegment === l.targetSegment ? styles.activeSegment : styles.inactiveSegment}>
                    {l.label}
                  </Link>
                </li>
              );
            })} */}
          </ul>
        </nav>
        <div>{children}</div>
      </MqttProvider>
    </>
  );
}
